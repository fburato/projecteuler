/*
By replacing the 1st digit of the 2-digit number *3, it turns out that six of the nine possible values: 13, 23, 43, 53, 73, and 83, are all prime.

By replacing the 3rd and 4th digits of 56**3 with the same digit, this 5-digit number is the first example having seven primes among the ten generated numbers, yielding the family: 56003, 56113, 56333, 56443, 56663, 56773, and 56993. Consequently 56003, being the first member of this family, is the smallest prime with this property.

Find the smallest prime which, by replacing part of the number (not necessarily adjacent digits) with the same digit, is part of an eight prime value family.
*/
import java.util.Arrays;
import java.util.LinkedList;

class Problem51 {

  public static boolean isPrime(int n) {
    if(n <= 1)
      return false;
    int limit = (int) Math.sqrt(n);
    boolean stillPrime = true;
    for(int i = 2; stillPrime && i <= limit; ++i)
      stillPrime = n % i != 0;
    return stillPrime;
  }
  
  /* 
   * Counts the number of primes generated by replacing the digits
   * indicated in the mask
   */ 
  public static int countPrimes(int[] digits, boolean[] mask, int original) {
    int[] workingArray;
    int countprimes = 0;
    workingArray = Arrays.copyOf(digits, digits.length);
    for(int i = 0; i <= 9; ++i) {
      for(int j = 0; j < mask.length ; ++j){
        if(mask[j]) {
          workingArray[j] = i;
        }
      }
      int newValue = getNumFromDigits(workingArray);
      if(newValue != original && digits(newValue) == digits.length && isPrime(newValue)) {
        countprimes++;
      }
    }
    return countprimes + 1;
  }
  
  /*
   * Returns the n-th mask
   */
  public static boolean[] mask(int n) {
    int ndigits = digits(n);
    boolean res[] = new boolean[ndigits];
    for(int i = res.length-1; i >= 0 ;--i) {
      res[i] = n % 2 == 1;
      n = n / 2;
    }
    return res;
  }
  public static LinkedList<boolean[]> getMasks(int[] digits) {
    LinkedList<boolean[]> list = new LinkedList<>();
    boolean[] done = {false,false,false,false,false,
        false,false,false,false,false};
    for(int i = 0; i < digits.length; ++i) {
      if(!done[digits[i]]) {
        done[digits[i]] = true;
        boolean[] mask = new boolean[digits.length];
        mask[i] = true;
        boolean stop = false;
        for(int j = i+1; j < digits.length; ++j)
          if(digits[j] == digits[i])
            mask[j] = true;
        list.add(mask);
      }
    }
    return list;
  }
  /*
   * Counts the number of digits of n
   */ 
  public static int digits(int n) {
    int power = 10;
    int count = 1;
    while(power > 0) {
      if(n < power)
        return count;
      power = power*10;
      count++;
    }
    return count;
  }
  
  /*
   * Returns the array containing the 
   */
  public static int[] getDigits(int n, int size) {
    int[] res = new int[size];
    for(int i = size-1; i >=0; --i){
      res[i] = n % 10;
      n = n / 10;
    }
    return res;
  }
  
  public static int getNumFromDigits(int[] n) {
    int sum = 0;
    for(int i = 0; i < n.length; ++i)
      sum = sum*10 + n[i];
    return sum;
  }
  
  public static void main(String argv[]) {
    for(int i = 56003; i>0 ;++i) {
      if(isPrime(i)) {
        // start generating the possible masks
        int ilength = digits(i);
        int currentMask = 1;
        int idigits[] = getDigits(i,ilength);
        LinkedList<boolean[]> masks = getMasks(idigits);
        for(boolean[] mask : masks) {
          int countprimes = countPrimes(idigits,mask,i);
          if(countprimes == 8) {
            System.out.println(i);
            return ;
          }
          currentMask++;
          mask = mask(currentMask);
        }
      }
    }
  }
} 
