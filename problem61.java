/*
Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:

Triangle	 	P3,n=n(n+1)/2	 	1, 3, 6, 10, 15, ...
Square	 	P4,n=n2	 	1, 4, 9, 16, 25, ...
Pentagonal	 	P5,n=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
Hexagonal	 	P6,n=n(2n−1)	 	1, 6, 15, 28, 45, ...
Heptagonal	 	P7,n=n(5n−3)/2	 	1, 7, 18, 34, 55, ...
Octagonal	 	P8,n=n(3n−2)	 	1, 8, 21, 40, 65, ...
The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

1. The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).
2. Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a different number in the set.
3. This is the only set of 4-digit numbers with this property.

Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.
*/

class Problem61 {
  private static interface Figurative {
    public boolean isFigurative(int i);
    public int figurative(int n);
  } 
  
  private static Figurative verifier[];
  
  static {
    verifier = new Figurative[6];
    verifier[1] = new Figurative() {
      // triangular
      public int figurative(int n) {
        return n*(n+1)/2;
      }
      public boolean isFigurative(int i){
        int n = (int) Math.sqrt(2*i);
        while(figurative(n) > i) {
          n--;
        }
        return figurative(n) == i;
      }
    };
    
    verifier[0] = new Figurative() {
      // square
      public int figurative(int n) {
        return n*n;
      }
      
      public boolean isFigurative(int i) {
        int intSqrt = (int) Math.sqrt(i);
        return intSqrt*intSqrt == i;
      }
    };
    
    verifier[2] = new Figurative() {
      // pentagonal
      public int figurative(int n) {
        return n *(3*n-1)/2;
      }
      
      public boolean isFigurative(int i) {
        int n = (int) Math.sqrt(((double)2*i)/3);
        while(figurative(n) < i) {
          n++;
        }
        return figurative(n) == i;
      }
    };
    
    verifier[3] = new Figurative() {
      // hexagonal
      public int figurative(int n) {
        return n*(2*n -1);
      }
      
      public boolean isFigurative(int i) {
        int n = (int) Math.sqrt(((double)i)/2);
        while(figurative(n) < i) {
          n++;
        }
        return figurative(n) == i;
      }
    };
    
    verifier[4] = new Figurative() {
      // heptagonal
      public int figurative(int n) {
        return n*(5*n-3)/2;
      }
      
      public boolean isFigurative(int i) {
        int n = (int) Math.sqrt(((double)2*i)/5);
        while(figurative(n) < i) {
          n++;
        }
        return figurative(n) == i;
      }
    };
    
    verifier[5] = new Figurative() {
      // optagonal
      public int figurative(int n) {
        return n*(3*n - 2);
      }
      
      public boolean isFigurative(int i) {
        int n = (int) Math.sqrt(((double)i)/3);
        while(figurative(n) < i) {
          n++;
        }
        return figurative(n) == i;
      }
    };
  }
  
  public static boolean findSixple(int elements[], boolean found[], int satisfied, int firstnumber, int lastnumber) {
    if(satisfied == elements.length -1) {
      // check lastnumber which is uniquely determined
      int num = (firstnumber / 100) + (lastnumber % 100) * 100;
      boolean stop = false;
      for(int i = 0; !stop && i < elements.length; ++i) {
        if(!found[i]) {
          stop = true;
          if(verifier[i].isFigurative(num)) {
            found[i] = true;
            elements[i] = num;
            return true;
          }
        }
      }
      return false;
    }
    // check all numbers which satisfy one of the constraint
    int seed = (lastnumber % 100) * 100;
    boolean stop = false;
    for(int i = 10; !stop && i<= 99; i++) {
      // look for a constrait satisfied
      int num = seed + i;
      boolean alreadyPresent = false;
      for(int j = 0; !alreadyPresent && j < elements.length; ++j) {
        alreadyPresent = num == elements[j];
      }
      for(int j = 0; !stop && !alreadyPresent && j < elements.length; ++j) {
        if(!found[j] && verifier[j].isFigurative(num)) {
          found[j] = true;
          elements[j] = num;
          stop = findSixple(elements,found,satisfied+1,firstnumber,num);
          if(!stop){
            found[j] = false;
            elements[j] = 0;
          }
        }
      }
    }
    return stop;
  } 
  
  public static void main(String argv[]) {
    int elements[] = new int[6];
    boolean found[] = {true, false, false , 
        false, false, false };
    boolean stop = false;
    for(int i = 32; ! stop && i*i <= 9999; ++i) {
      if(i*i % 100 >= 10) {
        elements[0] = i*i;
        stop = findSixple(elements,found,1,elements[0],elements[0]);
      }
    }
    int sum = 0;
    for(int i : elements) {
      System.out.print("" + i + " ");
      sum = sum +i ;
    }
    System.out.println("-> " + sum + " " + stop);
  }
}
